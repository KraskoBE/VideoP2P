/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    "env": {
        "browser": true,
        "node": true
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "src/tsconfig.eslint.json",
        "sourceType": "module"
    },
    "plugins": [
        "import",
        "@angular-eslint/eslint-plugin",
        "@typescript-eslint",
        "deprecation"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript"
    ],
    "rules": {
        "@angular-eslint/component-class-suffix": [
            "error",
            {
                "suffixes": [
                    "Component",
                    "Layout"
                ]
            }
        ],
        "@angular-eslint/directive-class-suffix": "off",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-rename": [ "error", { "allowedNames": [ "aria-describedby" ] } ],
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/explicit-function-return-type": [ "error", { "allowExpressions": true } ],
        "@typescript-eslint/explicit-member-accessibility": [
            "warn",
            {
                "accessibility": "explicit",
                "overrides": {
                    "constructors": "no-public"
                }
            }
        ],
        "@typescript-eslint/explicit-module-boundary-types": [ "off" ],
        "@typescript-eslint/member-delimiter-style": [
            "error",
            {
                "multiline": {
                    "delimiter": "semi",
                    "requireLast": true
                },
                "singleline": {
                    "delimiter": "semi",
                    "requireLast": false
                }
            }
        ],
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "default",
                "format": [ "camelCase" ],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "variable",
                "format": [ "camelCase", "PascalCase", "UPPER_CASE", "snake_case" ],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "typeLike",
                "format": [ "PascalCase" ]
            },
            {
                "selector": "classProperty",
                "format": [ "camelCase", "PascalCase", "UPPER_CASE" ],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "enum",
                "format": [ "PascalCase", "UPPER_CASE" ]
            },
            {
                "selector": "enumMember",
                "format": [ "camelCase", "UPPER_CASE" ]
            },
            {
                "selector": "objectLiteralProperty",
                "format": [ "camelCase", "PascalCase", "UPPER_CASE", "snake_case" ]
            },
            {
                "selector": [ "function", "classMethod", "objectLiteralMethod", "typeMethod" ],
                "format": [ "camelCase", "PascalCase" ],
                "filter": {
                    "regex": "describe",
                    "match": false
                }
            }
        ],
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-unused-expressions": [ "error", { "allowShortCircuit": true, "allowTernary": true } ],
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/quotes": [ "error", "double" ],
        "@typescript-eslint/semi": [ "error", "always" ],
        "@typescript-eslint/no-shadow": [ "error", { "ignoreTypeValueShadow": true } ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/typedef": [
            "warn",
            {
                "arrayDestructuring": true,
                "arrowParameter": true,
                "memberVariableDeclaration": true,
                "objectDestructuring": true,
                "parameter": true,
                "propertyDeclaration": true,
                "variableDeclaration": true,
                "variableDeclarationIgnoreFunction": true
            }
        ],
        "@typescript-eslint/unified-signatures": "error",
        "array-bracket-spacing": [ "error", "always" ],
        "arrow-body-style": "error",
        "brace-style": [ "error", "1tbs" ],
        "computed-property-spacing": [ "error", "always" ],
        "consistent-return": "error",
        "curly": "error",
        "deprecation/deprecation": "error",
        "eol-last": "error",
        "eqeqeq": [ "error", "smart" ],
        "getter-return": [ "error", { "allowImplicit": true } ],
        "guard-for-in": "error",
        "id-match": "off",
        "import/named": "off",
        "import/no-deprecated": "error",
        "import/no-unresolved": "off",
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1,
                "CallExpression": { "arguments": "first" },
                "FunctionExpression": { "parameters": "first" },
                "FunctionDeclaration": { "parameters": "first" },
                "MemberExpression": "off",
                "ignoredNodes": [ "ConditionalExpression" ]
            }
        ],
        "max-depth": [ "error" ],
        "max-len": [
            "error",
            {
                "ignorePattern": "^import ",
                "code": 140
            }
        ],
        "max-lines": [ "warn", { "max": 400 } ],
        "max-nested-callbacks": [ "error" ],
        "max-statements": [ "error", 75 ],
        "no-alert": "error",
        "no-bitwise": "off",
        "no-caller": "error",
        "no-console": [ "error", { "allow": [ "error" ] } ],
        "no-eval": "error",
        "no-implicit-coercion": "warn",
        "no-multi-spaces": "error",
        "no-multiple-empty-lines": [ "error", { "max": 1 } ],
        "no-new-wrappers": "error",
        "no-redeclare": "off",
        "no-restricted-imports": [ "error", "rxjs/Rx" ],
        "no-shadow": "off",
        "no-throw-literal": "error",
        "no-trailing-spaces": "error",
        "no-undef": "off",
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        "no-unused-vars": [
            "error",
            {
                "vars": "local",
                "args": "none",
                "ignoreRestSiblings": false,
                "caughtErrors": "all"
            }
        ],
        "no-var": "error",
        "operator-linebreak": [ "error", "before" ],
        "prefer-const": "error",
        "prefer-object-spread": "error",
        "radix": "error",
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "never",
                "asyncArrow": "never",
                "named": "never"
            }
        ],
        "space-in-parens": [ "error", "always" ],
        "spaced-comment": [
            "error",
            "always",
            {
                "markers": [
                    "/"
                ]
            }
        ]
    }
};
